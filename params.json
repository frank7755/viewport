{
  "name": "Viewport",
  "tagline": "A library for get a callback when any element becomes visible in a viewport (window or custom viewport)",
  "body": "viewport\r\n=========\r\n\r\n>A library for get a callback when any element becomes visible in a viewport (window or custom viewport)\r\n\r\n##Introduction\r\n```js\r\n'use strict';\r\n\r\n// import\r\nvar $ = require('jquery');\r\nvar Viewport = require('./viewport');\r\n\r\n// image lazy load\r\n$(function (){\r\n  var viewport = new Viewport(window, {\r\n    delay: 150,\r\n    threshold: 0,\r\n    skipHidden: true,\r\n    thresholdBorderReaching: 0,\r\n    target: 'img[data-src]'\r\n  });\r\n\r\n  viewport.on('viewchange', function (e){\r\n    $.each(e.target, function (i, image){\r\n      image = $(image);\r\n\r\n      var src = image.attr('data-src');\r\n\r\n      if (!src) return;\r\n\r\n      image.removeAttr('data-src');\r\n      image.addClass('ui-loading');\r\n\r\n      $('<img />').on('load error', { image: image, src: src }, function (event){\r\n        var image = event.data.image;\r\n        var src = event.data.src;\r\n\r\n        image\r\n          .hide()\r\n          .removeClass('ui-loading')\r\n          .attr('src', src)\r\n          .fadeIn('fast');\r\n      }).attr('src', src);\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n## API\r\n### Viewport(viewport[, options])\r\n###### viewport - ```HTMLElement|window```\r\n> The viewport element\r\n\r\n###### options\r\n- *target* - ```String|jQueryElement|HTMLElement```\r\n> The elements want to be watched in viewport\r\n\r\n- *threshold* - ```Number|Array```\r\n> With this value you can increase or decrease the threshold range viewport detection\r\n> The value will parsed like css margin and padding\r\n\r\n- *skipHidden* - ```Boolean```\r\n> Skip hidden element in target\r\n\r\n- *delay* - ```Number```\r\n> The delay of viewchange event emit frequency\r\n\r\n- *thresholdBorderReaching*\r\n> With this value you can increase or decrease the threshold range viewport border reaching detection\r\n> The value will parsed like css margin and padding\r\n\r\n### Method\r\n###### on\r\n> Add a event listener\r\n\r\n###### off\r\n> Remove a event listener\r\n\r\n###### emit(event[, data])\r\n> Trigger a event\r\n\r\n###### refresh([options])\r\n> Refresh viewport\r\n\r\n###### destroy()\r\n> Destroy viewport\r\n\r\n\r\n### Event\r\n###### viewchange\r\n> When viewport on scroll and resize, it will emit viewchange event\r\n\r\n### Event Data\r\n- *type*\r\n> Event type, always ```viewchange```\r\n\r\n- *emitter*\r\n> The emitter of triggered viewchange, maybe ```init|refresh|scroll|resize```\r\n\r\n- *target*\r\n> The element appear into viewport now\r\n\r\n- *offsetX*\r\n> The scrollbar offset x\r\n\r\n- *offsetY*\r\n> The scrollbar offset y\r\n\r\n- *scrollTop*\r\n> The scrollbar scroll top\r\n\r\n- *scrollLeft*\r\n> The scrollbar scroll left\r\n\r\n- *viewport*\r\n> The viewport size [width, height, scrollWidth, scrollHeight]\r\n\r\n- *top*\r\n> Is scrollbar reached viewport top\r\n\r\n- *right*\r\n> Is scrollbar reached viewport right\r\n\r\n- *bottom*\r\n> Is scrollbar reached viewport bottom\r\n\r\n- *left*\r\n> Is scrollbar reached viewport left\r\n\r\n##Demo\r\n#### [Viewport scroll spy and viewport image lazyload](https://nuintun.github.io/viewport/examples/index.html)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}